#!/usr/bin/env python

import sys
import numpy as np
import cv2
from pylepton import Lepton

def capture(flip_v = False, device = "/dev/spidev0.0"):
  with Lepton(device) as l:
    a,_ = l.capture()
  if flip_v:
    cv2.flip(a,0,a)
  cv2.normalize(a, a, 0, 65535, cv2.NORM_MINMAX)
  np.right_shift(a, 8, a)
  return np.uint8(a)

if __name__ == '__main__':
  from optparse import OptionParser

  usage = "usage: %prog [options] output_file[.format]"
  parser = OptionParser(usage=usage)

  parser.add_option("-f", "--flip-vertical",
                    action="store_true", dest="flip_v", default=False,
                    help="flip the output image vertically")

  parser.add_option("-d", "--device",
                    dest="device", default="/dev/spidev0.0",
                    help="specify the spi device node (might be /dev/spidev0.1 on a newer device)")

  (options, args) = parser.parse_args()

##  if len(args) < 1:
##    print("You must specify an output filename")
##    sys.exit(1)

  for i in range(100):
      image = capture(flip_v = options.flip_v, device = options.device)
      I2 = cv2.equalizeHist(image) #Level the histogram
      I2 = cv2.GaussianBlur(I2,(7,7),0) #Perform Gaussian blur
      ret3, I2 = cv2.threshold(I2, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU) #Threshold image

      ##Remove small connected objects
##      nb_components, output, stats, centroids = cv2.connectedComponentsWithStats(I2, 8, cv2.CV_32S)
##      sizes = stats[1:-1]; nb_components = nb_components - 1
##
##      min_size = 200
##
##      I3 = np.zeros((output.shape))
##
##      for i in range(0, nb_components):
##        if sizes[i] >= minsize:
##          I3[output == i+1] = 255
  

      ##Show the final image
      cv2.imshow('image', I2)
      cv2.waitKey(10)
    

##canny edge detector, blur every frame before using this
##threshold then contour
##take pictures, look at them in MATLAB --> pixel intensity values
## imread --> imagesc -->
##look for the moving object, and

## reinstal open cv 3
